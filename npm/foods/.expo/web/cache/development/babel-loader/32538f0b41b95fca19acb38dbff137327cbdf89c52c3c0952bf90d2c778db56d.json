{"ast":null,"code":"export var Validation = function Validation(values) {\n  alert(\"\");\n  var errors = {};\n  if (!values.email) {\n    errors.email = \"Required\";\n  } else if (!EmailValidator.validate(values.email)) {\n    errors.email = \"Invalid email address\";\n  }\n  var passwordRegex = /(?=.*[0-9])/;\n  if (!values.password) {\n    errors.password = \"Required\";\n  } else if (values.password.length < 8) {\n    errors.password = \"Password must be 8 characters long.\";\n  } else if (!passwordRegex.test(values.password)) {\n    errors.password = \"Invalida password. Must contain one number\";\n  }\n  return errors;\n};","map":{"version":3,"names":["Validation","values","alert","errors","email","EmailValidator","validate","passwordRegex","password","length","test"],"sources":["C:/npm/foods/src/pages/login/signupvalidation.jsx"],"sourcesContent":["\r\n\r\nexport const Validation =(values) =>   {\r\n    alert(\"\")\r\n    let errors = {};\r\n    if (!values.email) {\r\n      errors.email = \"Required\";\r\n    } else if (!EmailValidator.validate(values.email)) {\r\n      errors.email = \"Invalid email address\";\r\n    }\r\n\r\n    const passwordRegex = /(?=.*[0-9])/;\r\n    if (!values.password) {\r\n      errors.password = \"Required\";\r\n    } else if (values.password.length < 8) {\r\n      errors.password = \"Password must be 8 characters long.\";\r\n    } else if (!passwordRegex.test(values.password)) {\r\n      errors.password = \"Invalida password. Must contain one number\";\r\n    }\r\n\r\n    return errors;\r\n  }\r\n    // let error = {}\r\n    // const email_pattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\r\n    // const password_pattern = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[a-zA-Z0-9]{8,}$/\r\n\r\n//     if (values.name === \"\") {\r\n//         error.name= \"Name should not be empy\"\r\n//     } else{\r\n//         error.name=\"\"\r\n//     }\r\n\r\n//     if (values.email === \"\") {\r\n//         error.email= \"Email should not be empty\"\r\n//     } \r\n//     else if (!email_pattern.test(values.email)){\r\n//         error.email = \"Email didnt match\"\r\n//     } else {\r\n//         error.email =\"\"\r\n//     }\r\n//     if (values.password === \"\") {\r\n//         error.password= \"Password should not be empty\"\r\n//     }\r\n//     else if (!password_pattern.test(values.password)){\r\n//         error.password = \"Password didnt match\"\r\n//     } else {\r\n//         error.password =\"\"\r\n//     }\r\n//     return error;\r\n// }\r\n"],"mappings":"AAEA,OAAO,IAAMA,UAAU,GAAE,SAAZA,UAAUA,CAAGC,MAAM,EAAO;EACnCC,KAAK,CAAC,EAAE,CAAC;EACT,IAAIC,MAAM,GAAG,CAAC,CAAC;EACf,IAAI,CAACF,MAAM,CAACG,KAAK,EAAE;IACjBD,MAAM,CAACC,KAAK,GAAG,UAAU;EAC3B,CAAC,MAAM,IAAI,CAACC,cAAc,CAACC,QAAQ,CAACL,MAAM,CAACG,KAAK,CAAC,EAAE;IACjDD,MAAM,CAACC,KAAK,GAAG,uBAAuB;EACxC;EAEA,IAAMG,aAAa,GAAG,aAAa;EACnC,IAAI,CAACN,MAAM,CAACO,QAAQ,EAAE;IACpBL,MAAM,CAACK,QAAQ,GAAG,UAAU;EAC9B,CAAC,MAAM,IAAIP,MAAM,CAACO,QAAQ,CAACC,MAAM,GAAG,CAAC,EAAE;IACrCN,MAAM,CAACK,QAAQ,GAAG,qCAAqC;EACzD,CAAC,MAAM,IAAI,CAACD,aAAa,CAACG,IAAI,CAACT,MAAM,CAACO,QAAQ,CAAC,EAAE;IAC/CL,MAAM,CAACK,QAAQ,GAAG,4CAA4C;EAChE;EAEA,OAAOL,MAAM;AACf,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}